buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.16.5-1.0'
group = 'net.pyding.astralarsenal' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'astralarsenal'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                astralarsenal {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                astralarsenal {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'astralarsenal', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                astralarsenal {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {

    maven {
        name 'hellfirepvp maven'
        url 'https://maven.hellfiredev.net/'
    }

    maven {
        name 'curios maven'
        url "https://maven.theillusivec4.top/"
    }

    maven {
        name 'JEI maven'
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'Botania maven'
        url "https://maven.blamejared.com"
    }
    maven {
        name 'CF maven dankstorage'
        url "https://www.cursemaven.com"
    }
    flatDir {
        dirs 'lib'
    }
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'

    implementation name: "astralsorcery-1.16.5-1.14.1-deobf"
    implementation name: "curios-forge-1.16.5-4.0.8.0-deobf"
    implementation name: "observerlib-1.16.5-1.5.3-deobf"


    compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.121:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.121")

    compileOnly fg.deobf('vazkii.patchouli:Patchouli:1.16.4-51:api')
    runtimeOnly fg.deobf('vazkii.patchouli:Patchouli:1.16.4-51')

    compileOnly fg.deobf('vazkii.botania:Botania:1.16.5-419:api')
    runtimeOnly fg.deobf('vazkii.botania:Botania:1.16.5-419')

    compileOnly fg.deobf('com.blamejared.crafttweaker:CraftTweaker-1.16.5:7.1.0.294')
    runtimeOnly fg.deobf('com.blamejared.crafttweaker:CraftTweaker-1.16.5:7.1.0.294')

    compileOnly fg.deobf("curse.maven:corail-tombstone-243707:3800673")
    runtimeOnly fg.deobf("curse.maven:corail-tombstone-243707:3800673")

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "astralarsenal",
            "Specification-Vendor": "astralarsenalsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"astralarsenalsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
